require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/books", type: :request do
  describe "GET /books.json" do
    let!(:books) { create_list(:book, 10) }
    it "10件取得できる" do
      subject
      expect(Book.count).to eq 10
    end
  end

  describe "GET /books/:id.json" do
    let!(:book) { create(:book) }
    let(:id) { book.id }
    let(:return_obj) do
      {
        id: book.id,
        title: book.title,
        author: book.author,
        published_at: book.published_at.strftime,
        created_at: book.created_at.strftime("%Y-%m-%dT%H:%M:%S.%LZ"),
        updated_at: book.updated_at.strftime("%Y-%m-%dT%H:%M:%S.%LZ"),
        url: "http://www.example.com/books/#{book.id}.json"
      }
    end
    it '200番と適切な値が返却される' do
      is_expected.to eq 200
      expect(response.body).to match_json_expression(return_obj)
    end
  end

  describe "POST /books" do
    let(:title) { 'title' }
    let(:author) { 'author' }
    let(:published_at) { Date.today.strftime }
    let(:params) do
      {
        book: {
          title: title,
          author: author,
          published_at: published_at
        }
      }
    end
    context "with valid parameters" do
      it "creates a new Book" do
        expect {
          subject
        }.to change{ Book.count }.by(1)
      end
    end

    context "with invalid parameters" do
      let(:title) { nil }
      it "does not create a new Book" do
        expect {
          subject
        }.to change{ Book.count }.by(0)
      end
    end
  end

  describe "PATCH /books/:id" do
    let!(:book) { create(:book) }
    let(:id) { book.id }
    let(:params) do
      {
        book: {
          title: title
        }
      }
    end
    context "with valid parameters" do
      let(:title) { 'new title' }
      it "タイトルが更新されている" do
        subject
        book.reload
        expect(book.title).to eq title
      end
    end

    context "with invalid parameters" do
      let(:title) { nil }
      it "タイトルは更新されていない" do
        subject
        book.reload
        expect(book.title).not_to eq title
      end
    end
  end

  describe "DELETE /books/:id" do
    xit "本が削除されてレコード数が1つ減っている" do
      book = Book.create! valid_attributes
      expect {
        delete book_url(book)
      }.to change(Book, :count).by(-1)
    end
  end
end
